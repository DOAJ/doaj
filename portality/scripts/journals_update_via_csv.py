"""
~~ JournalUpdateByCSV:Script ~~
Update journals via CSV for issue e.g. https://github.com/DOAJ/doajPM/issues/2708
twinned with journals_in_doaj_by_account.py

This script makes use of the ManEd journal form processor to validate and finalise updates.

If environment variable DOAJ_CSV_NOTE is set, the supplied note will be applied to all created update requests.

Input CSV is a standard DOAJ journal CSV

Usage:
e.g. for a dry-run first with a malformed CSV
    export DOAJ_CSV_NOTE='UR autogenerated after publisher CSV uploaded. Change to URL and/or APCS.'
    DOAJENV=production python -u journals_update_via_csv.py -i <input_csv_path.csv> -s -d | tee <output_log_path.txt>

Check the report for errors and the output for expected changes, then run without -d to apply the updates.

e.g. to validate a CSV upload and create a batch of update requests from that user
    DOAJENV=production python -u journals_update_via_csv.py -i <input_csv_path.csv> -a <publisher_account_id> -m
"""

import os
import csv
import re

from portality import lock, constants
from portality.core import app
from portality.models import Journal, Account
from portality.crosswalks import journal_questions
from portality.crosswalks.journal_questions import Journal2PublisherUploadQuestionsXwalk


from portality.forms.application_forms import ApplicationFormFactory

from portality.bll import DOAJ
from portality.bll.exceptions import AuthoriseException

SYSTEM_ACCOUNT = {
    "email": "steve@cottagelabs.com",
    "name": "script_journals_csv_update",
    "role": ['admin'],
    "id": "script_journals_csv_update"
}

sys_acc = Account(**SYSTEM_ACCOUNT)


def confirm_prompt():
    doit = input('Proceed? [y\\N] ')

    if doit.lower() != 'y':
        print('\nExiting.')
        exit(0)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--infile", help="Path to journal update spreadsheet", required=True)

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-a", "--account", help="Account ID of the user to import as")
    group.add_argument('-s', '--sys', help="Validate and create URs using the system user (for admin / batch uploads)", action='store_true')
    group.add_argument('-p', '--prefix', help="Read the account by splitting the filename (supplied as e.g. 12341234.publisher_doajupload.csv)", action='store_true')

    parser.add_argument("-d", "--dry-run", help="Run this script without actually making index changes", action='store_true')
    parser.add_argument("-m", "--manual-review", help="Don't finalise the update requests, instead leave open for manual review.", action='store_true')
    parser.add_argument("-y", "--yes", help="Bypass prompt to accept the note", action='store_true')
    parser.add_argument("-f", "--force", help="Ignore warnings and process changes anyway (errors still halt)", action='store_true')

    args = parser.parse_args()

    note = os.getenv('DOAJ_CSV_NOTE', '')
    print('\nNote supplied via $DOAJ_CSV_NOTE: ' + note)

    if not args.yes:
        confirm_prompt()

    # Disable app emails so this doesn't spam users
    app.config['ENABLE_EMAIL'] = False
    app.config['ENABLE_PUBLISHER_EMAIL'] = False

    # Turn off debug so we don't get extra messages in the output
    app.config['DEBUG'] = False

    # Disable autochecks so that they don't interfere with the process
    app.config['AUTOCHECK_INCOMING'] = False

    if args.sys:
        acc = sys_acc
    else:
        found_account_name = re.split(r'[._]', os.path.basename(args.infile))[0] if args.prefix else args.account
        print(f'Creating Update Requests as account {found_account_name}')

        acc = Account.pull(found_account_name)

        if acc is None:
            print(f'ERROR: Account {args.account} not found.')
            exit(1)

    appSvc = DOAJ.applicationService()
    validation_results = appSvc.validate_update_csv(args.infile, acc)
    if validation_results.has_errors_or_warnings():
        print(f'ERROR: CSV validation failed with warnings or errors.')
        print(validation_results.json(indent=2))

        if not args.dry_run:
            if not validation_results.has_errors() and args.force:
                print('Forcing update despite warnings...')
            elif validation_results.has_errors() and args.force:
                if args.sys:
                    print("DANGER - do you want to force these changes despite errors (some may not work)?")
                    confirm_prompt()
                else:
                    print("Can't force update on file with errors using publisher account.")
                    exit(1)
            else:
                print(f'No updates processed due to errors or warnings. Supply -f arg to ignore warnings.')
                exit(1)

    # if we get to here, the records can all be imported*, so we can go ahead with minimal additional checks
    # * unless we're forcing with errors

    # Open with encoding that deals with the Byte Order Mark since we're given files from Windows.
    with open(args.infile, 'r', encoding='utf-8-sig') as g:
        reader = csv.DictReader(g)

        # Talking about spreadsheets, so we start at 1
        row_ix = 1

        # ~~ ->$JournalUpdateByCSV:Feature ~~
        for row in reader:
            row_ix += 1
            print(f'\n***\nCSV row {row_ix}')
            assert isinstance(row, dict)

            # Skip empty rows
            if not any(row.values()):
                print("Skipping empty row.")
                continue

            # Pull by ISSNs
            issns = [
                row.get(Journal2PublisherUploadQuestionsXwalk.q("pissn")),
                row.get(Journal2PublisherUploadQuestionsXwalk.q("eissn"))
            ]

            try:
                j = Journal.find_by_issn(issns, in_doaj=True, max=1).pop(0)
            except IndexError:
                print("No journal record in DOAJ for ISSN(s) {0}.  It may not be present, or may be withdrawn.".format(", ".join(issns)))
                continue

            print('Updating journal with ID ' + j.id)
            # Load remaining rows into application form as an update
            # ~~ ^->JournalQuestions:Crosswalk ~~
            update_form, updates = journal_questions.Journal2QuestionXwalk.question2form(j, row)

            if len(updates) == 0:
                print("No updates to do")
                continue
            
            [print(upd) for upd in updates]

            # Create an update request for this journal
            update_req = None
            jlock = None
            alock = None
            try:
                # ~~ ^->UpdateRequest:Feature ~~
                update_req, jlock, alock = DOAJ.applicationService().update_request_for_journal(j.id, account=acc)
            except AuthoriseException as e:
                print('Could not create update request: {0}'.format(e.reason))
                continue
            except lock.Locked as e:
                print('Could not edit journal - locked.')
                continue

            # If we don't have a UR, we can't continue
            if update_req is None:
                print('Journal not in DOAJ - missing or not public')
                continue

            # validate update_form - portality.forms.application_processors.PublisherUpdateRequest
            # ~~ ^->UpdateRequest:FormContext ~~
            formulaic_context = ApplicationFormFactory.context("update_request")
            fc = formulaic_context.processor(
                formdata=update_form,
                source=update_req
            )

            try:
                if not args.dry_run:
                    # FIXME: we have to validate, as this pre-filters conditional fields and makes other protections
                    # on the form values.  This is not really ideal, as validate shouldn't really be changing the data!
                    fc.validate()

                    # Save the update request
                    fc.finalise(email_alert=False)
                    print('Update request created.')

                    # Add note to UR if supplied
                    if note:
                        fc.target.add_note(note, author_id=sys_acc.id)

                    if not args.manual_review:
                        # This is the update request, in 'update request' state
                        update_req_for_review = fc.target

                        # Admin update request review form - portality.forms.application_processors.AdminApplication
                        # ~~ ^->ManEdApplication:FormContext ~~
                        formulaic_context2 = ApplicationFormFactory.context("admin")
                        fc2 = formulaic_context2.processor(
                            source=update_req_for_review
                        )

                        # Accept the update request, and finalise to complete the changes
                        fc2.form.application_status.data = constants.APPLICATION_STATUS_ACCEPTED
                        fc2.finalise(sys_acc, email_alert=False)
                        print('Automatic review. Journal has been updated.')
            except Exception as e:
                print('Failed to finalise: {1}'.format(j.id, str(e)))
                raise
            finally:
                if jlock is not None:
                    jlock.delete()
                if alock is not None:
                    alock.delete()
